package org.ihtsdo.otf.im.web.filter;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * Filter used to put the CSRF token generated by Spring Security in a cookie to be used by AngularJS front end.
 */
public class CsrfCookieGeneratorFilter extends OncePerRequestFilter {

	private final Logger log = LoggerFactory.getLogger(CsrfCookieGeneratorFilter.class);

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
		// Spring put the CSRF token in session attribute "_csrf"
		CsrfToken csrfToken = (CsrfToken) request.getAttribute("_csrf");

		// Send the cookie only if the token has changed
		String actualToken = request.getHeader("X-CSRF-TOKEN");
		if (actualToken == null || !actualToken.equals(csrfToken.getToken())) {
			// Session cookie that will be used by AngularJS
			String pCookieName = "CSRF-TOKEN";
			Cookie cookie = new Cookie(pCookieName, csrfToken.getToken());
			cookie.setMaxAge(-1);
			cookie.setHttpOnly(false);
			cookie.setPath(request.getContextPath());
			response.addCookie(cookie);
			log.debug("Set cookie {}, with path {}", pCookieName, cookie.getPath());
		}
		//also added service referrer url to header -->
		String serviceReferer = request.getParameter("serviceReferer");
		if (!StringUtils.isEmpty(serviceReferer)) {

			request.setAttribute("serviceReferer", serviceReferer);

		}
		filterChain.doFilter(request, response);
	}
}
